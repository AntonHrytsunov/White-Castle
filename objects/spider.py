import pygame
import os
import random
import logging
from utils.resource_loader import resource_path

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class Spider:

    _frame_cache = {}  # –ö–ª—é—á: (animation, scale, scale_x, scale_y) => value: [Surface, ...]
    _sound_cache = {}

    # üîß –û—Å–Ω–æ–≤–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
    FRAME_DELAY = 50  # ‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫–∞–¥—Ä–∞–º–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö (–∑–∞–≥–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∞–Ω—ñ–º–∞—Ü—ñ–π)
    WALK_SPEED = 3  # üö∂ –ë–∞–∑–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å —Ö–æ–¥—å–±–∏ (–ø—ñ–∫—Å/–∫–∞–¥—Ä)
    AGGRO_SPEED_INITIAL = 2  # üò° –ü–æ—á–∞—Ç–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø—Ä–∏ –≤—Ö–æ–¥—ñ –≤ –∞–≥—Ä–µ—Å–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º (–ø—ñ–∫—Å/–∫–∞–¥—Ä)
    AGGRO_ACCELERATION = 0.01  # üîº –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è —É –∞–≥—Ä–µ—Å–∏–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ (–ø—ñ–∫—Å/–∫–∞–¥—Ä¬≤)
    AGGRO_SPEED_MAX = 3.5  # üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Å—É–≤–∞–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ –∞–≥—Ä–µ—Å—ñ—ó (–ø—ñ–∫—Å/–∫–∞–¥—Ä)
    AGGRO_DISTANCE = 500  # üëÄ –í—ñ–¥—Å—Ç–∞–Ω—å, –∑ —è–∫–æ—ó –ø–∞–≤—É–∫ "–±–∞—á–∏—Ç—å" –≥—Ä–∞–≤—Ü—è —Ç–∞ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è (–ø—ñ–∫—Å–µ–ª—ñ)
    STOP_DISTANCE = 200  # ‚õî –ü–∞–≤—É–∫ –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è –Ω–∞ —Ü—ñ–π –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ –≥—Ä–∞–≤—Ü—è –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ—é (–ø—ñ–∫—Å–µ–ª—ñ)
    AGGRO_PAUSE_DURATION = 200  # ‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –ø–æ—á–∞—Ç–∏ –ø–µ—Ä–µ—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∞–≥—Ä–µ—Å—ñ—ó (–º—Å)

    # ü§ñ –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –ø—Ä–∏ –±–ª—É–∂–¥–∞–Ω–Ω—ñ (—Ä–∞–Ω–¥–æ–º–Ω–∞ —Ö–æ–¥—å–±–∞, –∫–æ–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π)
    WALK_PROBABILITY = 0.6  # üé≤ –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Ç–æ–≥–æ, —â–æ –ø–∞–≤—É–∫ –≤–∏—Ä—ñ—à–∏—Ç—å –ø—ñ—Ç–∏ —É –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –Ω–∞–ø—Ä—è–º–æ–∫
    WALK_DECISION_INTERVAL = (2000, 5000)  # üß† –Ü–Ω—Ç–µ—Ä–≤–∞–ª —á–∞—Å—É –º—ñ–∂ —Ä—ñ—à–µ–Ω–Ω—è–º–∏ (–º—Å)
    WALK_DURATION_RANGE = (1000, 2000)  # üïì –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ–¥–Ω—ñ—î—ó –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏, —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ —Ä—É—Ö (–º—Å)

    # üêû –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –ø—Ä–∏ –∞–≥—Ä–µ—Å—ñ—ó (–≤–∏–ø–∞–¥–∫–æ–≤—ñ –∑—É–ø–∏–Ω–∫–∏ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è)
    AGGRO_STOP_PROBABILITY = 0.01  # ‚ùì –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑—Ä–æ–±–∏—Ç–∏ –ø–∞—É–∑—É –ø—ñ–¥ —á–∞—Å –∞–≥—Ä–µ—Å–∏–≤–Ω–æ–≥–æ —Ä—É—Ö—É (–∫–æ–∂–µ–Ω –∫–∞–¥—Ä)
    AGGRO_STOP_MIN_DURATION = 500  # üõë –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç–∞–∫–æ—ó –∑—É–ø–∏–Ω–∫–∏ (–º—Å)
    AGGRO_STOP_MAX_DURATION = 1000  # üõë –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑—É–ø–∏–Ω–∫–∏ (–º—Å)

    # ü¶ò –°—Ç—Ä–∏–±–æ–∫
    JUMP_PAUSE_DURATION = random.randint(300, 600)  # ‚è±Ô∏è –ü–∞—É–∑–∞ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç—Ä–∏–±–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º–∏ –¥—ñ—è–º–∏ (–º—Å)
    JUMP_GRAVITY = 1700  # üåç –ì—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—è –ø—ñ–¥ —á–∞—Å —Å—Ç—Ä–∏–±–∫–∞ ‚Äî –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —à–≤–∏–¥–∫–æ –ø–∞–≤—É–∫ "–ø–∞–¥–∞—î" (–ø—ñ–∫—Å/—Å¬≤)

    # ü¶ò –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –ø—Ä–∏ –≤–µ–ª–∏–∫—ñ–π –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó (—ñ–Ω–æ–¥—ñ —Å—Ç—Ä–∏–±–∞—î, —ñ–Ω–æ–¥—ñ –ø—Ä–æ—Å—Ç–æ –π–¥–µ)
    FAR_JUMP_PROBABILITY = 0.1  # –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Å—Ç—Ä–∏–±–∫–∞, —è–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –¥–∞–ª–µ–∫–æ
    FAR_JUMP_CHECK_INTERVAL = (2000, 3500)  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ —Å—Ç—Ä–∏–±–∫–∞

    def __init__(self, x, y, audio_manager, scale_x=1.0, scale_y=1.0, scale=None):
        self.audio_manager = audio_manager
        self.scale_x = scale_x
        self.scale_y = scale_y
        self.x = x
        self.y = y
        self.scale = scale if scale is not None else random.uniform(0.5, 1.3)
        self.flipped = random.choice([True, False])
        self.manager = None

        # üéûÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π
        self.stay_frames = self.load_frames("stay")
        self.walk_frames_original = self.load_frames("walk")
        self.walk_frames = self.walk_frames_original.copy()
        self.attack_frames_original = self.load_frames("atack")
        self.attack_frames = self.attack_frames_original.copy()
        self.jump_frames_original = self.load_frames("jump")
        self.jump_frames = self.jump_frames_original.copy()
        self.dead_frames = self.load_frames("dead")

        # üß† –°—Ç–∞–Ω–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó
        self.current_frame = 0
        self.frame_timer = 0
        self.frame_delay = self.FRAME_DELAY

        # üö∂ –•–æ–¥—å–±–∞
        self.walking = False
        self.walk_direction = 0
        self.walk_elapsed = 0
        self.walk_duration = 0
        self.walk_timer = 0
        self.next_walk_decision = random.randint(*self.WALK_DECISION_INTERVAL)
        self.walk_speed = self.WALK_SPEED / (0.5 + self.scale / 2)

        # üò° –ê–≥—Ä–µ—Å—ñ—è
        self.aggro = False
        self.aggro_wait_timer = 0
        self.aggro_paused = False
        self.aggro_stopping = False
        self.aggro_stop_timer = 0
        self.aggro_stop_duration = 0

        scale_modifier = 0.7 + self.scale / 8
        self.aggro_current_speed = self.AGGRO_SPEED_INITIAL / scale_modifier
        self.aggro_speed_max_scaled = self.AGGRO_SPEED_MAX / scale_modifier
        self.aggro_acceleration_scaled = self.AGGRO_ACCELERATION / scale_modifier

        # ü¶ò –°—Ç—Ä–∏–±–æ–∫
        self.jumping = False
        self.jumping_non_attack = False
        self.jump_animation_done = False
        self.jump_vx = 0
        self.jump_vy = 0
        self.jump_gravity = self.JUMP_GRAVITY
        self.jump_target_x = 0
        self.jump_start_y = 0
        self.after_jump_pause = False
        self.after_jump_timer = 0
        self.jump_total_dx = 0
        self.jump_travelled_dx = 0
        self.has_attacked_this_jump = False
        self.attack_count = 0

        self.far_jump_check_timer = 0
        self.far_jump_check_cooldown = random.randint(*Spider.FAR_JUMP_CHECK_INTERVAL)

        # –°–º–µ—Ä—Ç—å
        self.dead = False
        self.dead_animation_done = False
        self.ground_y = self.y
        self.fade_alpha = 255  # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–≤–Ω–∞ –Ω–µ–ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å
        self.fade_out_started = False
        self.fade_timer = 0
        self.fade_duration = 2000  # –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–Ω—è –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö (2 —Å–µ–∫—É–Ω–¥–∏)

        # üéµ –ê—É–¥—ñ–æ
        vol = self.audio_manager.sound_volume

        walk_sound_file = os.path.join("assets", "level_1", "spider", "walk", "Spider_walk.mp3")
        self.walk_sound = Spider.load_sound_cached(resource_path(walk_sound_file), vol)

        self.jump_sound_path = resource_path(os.path.join("assets", "level_1", "spider", "jump", "spider_jump.mp3"))
        self.jump_sound = Spider.load_sound_cached(self.jump_sound_path, vol)

        # ü™¶ –ó–≤—É–∫ —Å–º–µ—Ä—Ç—ñ
        death_sound_path = os.path.join("assets", "level_1", "spider", "dead", "dead.mp3")
        self.death_sound = Spider.load_sound_cached(resource_path(death_sound_path), vol)

        self.attack_sounds = []
        attack_sound_folder = resource_path(os.path.join("assets", "level_1", "spider", "atack"))
        for file in os.listdir(attack_sound_folder):
            if file.endswith((".mp3", ".wav", ".ogg")):
                path = os.path.join(attack_sound_folder, file)
                sound = Spider.load_sound_cached(path, volume=vol)
                if sound:
                    self.attack_sounds.append(sound)

        # üñãÔ∏è –®—Ä–∏—Ñ—Ç
        self.font = pygame.font.SysFont("Arial", int(20 * self.scale))

        # üîÑ –í—ñ–¥–¥–∑–µ—Ä–∫–∞–ª–µ–Ω–Ω—è
        if self.flipped:
            self.flip_images()

    def load_frames(self, animation_name):
        key = (animation_name, round(self.scale, 2), round(self.scale_x, 2), round(self.scale_y, 2))

        if key in Spider._frame_cache:
            return Spider._frame_cache[key]

        folder = resource_path(os.path.join("assets", "level_1", "spider", animation_name))
        files = sorted(f for f in os.listdir(folder) if f.endswith(".png"))
        frames = []

        for filename in files:
            image = pygame.image.load(os.path.join(folder, filename)).convert_alpha()
            width = int(image.get_width() * self.scale * self.scale_x)
            height = int(image.get_height() * self.scale * self.scale_y)
            scaled = pygame.transform.scale(image, (width, height))
            frames.append(scaled)

        Spider._frame_cache[key] = frames  # –ö–µ—à—É—î–º–æ
        return frames

    @staticmethod
    def load_sound_cached(path, volume):
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–≤—É–∫ —ñ–∑ –∫–µ—à–µ–º, —â–æ–± –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ Sound-–æ–± º—î–∫—Ç—ñ–≤ –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É.
        """
        if path in Spider._sound_cache:
            return Spider._sound_cache[path]
        try:
            sound = pygame.mixer.Sound(path)
            Spider._sound_cache[path] = sound
            sound.set_volume(volume)
            return sound
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—É–∫: {path}: {e}")
            return None

    def flip_images(self):
        """
        –í—ñ–¥–¥–∑–µ—Ä–∫–∞–ª—é—î –≤—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–∞–≤—É–∫–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ, —è–∫—â–æ –æ–±—Ä–∞–Ω–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—é.
        –¶–µ —Ä–æ–±–∏—Ç—å –≤–æ—Ä–æ–≥–∞ "–¥–∏–≤–ª—è—á–∏—Å—å –ª—ñ–≤–æ—Ä—É—á" –∑–∞–º—ñ—Å—Ç—å –ø—Ä–∞–≤–æ—Ä—É—á.
        """
        self.stay_frames = [
            pygame.transform.flip(frame, True, False) for frame in self.stay_frames
        ]
        self.walk_frames = [
            pygame.transform.flip(frame, True, False) for frame in self.walk_frames_original
        ]
        self.attack_frames = [
            pygame.transform.flip(frame, True, False) for frame in self.attack_frames_original
        ]
        self.jump_frames = [
            pygame.transform.flip(frame, True, False) for frame in self.jump_frames_original
        ]
        self.dead_frames = [
            pygame.transform.flip(frame, True, False) for frame in self.dead_frames
        ]

    def reload_scaled_frames(self):
        """
        –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ç–∞ –º–∞—Å—à—Ç–∞–±—É—î –≤—Å—ñ —Ñ—Ä–µ–π–º–∏ –∞–Ω—ñ–º–∞—Ü—ñ–π –ø–∞–≤—É–∫–∞ –∑–≥—ñ–¥–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –º–∞—Å—à—Ç–∞–±–∞–º–∏.
        –¶–µ–π –º–µ—Ç–æ–¥ –∫–æ—Ä–∏—Å–Ω–∏–π –ø—Ä–∏ –∑–º—ñ–Ω—ñ –º–∞—Å—à—Ç–∞–±—É –∞–±–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –µ–∫—Ä–∞–Ω—É.

        –¢–∞–∫–æ–∂ –≤–∏–∫–æ–Ω—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–ª—ñ–ø—É –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
        """

        # üßç –°—Ç–∞–Ω —Å–ø–æ–∫–æ—é
        self.stay_frames = self.load_frames("stay")

        # üö∂ –•–æ–¥—å–±–∞
        self.walk_frames_original = self.load_frames("walk")
        self.walk_frames = self.walk_frames_original.copy()

        # üï∑Ô∏è –ê—Ç–∞–∫–∞
        self.attack_frames_original = self.load_frames("atack")
        self.attack_frames = self.attack_frames_original.copy()

        # ü¶ò –°—Ç—Ä–∏–±–æ–∫
        self.jump_frames_original = self.load_frames("jump")
        self.jump_frames = self.jump_frames_original.copy()

        # üîÅ –Ø–∫—â–æ –ø–∞–≤—É–∫ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥–¥–∑–µ—Ä–∫–∞–ª–µ–Ω–∞ ‚Äî —Ñ–ª—ñ–ø–∞—î–º–æ –∫–∞–¥—Ä–∏
        if self.flipped:
            self.flip_images()

    def update(self, dt, player_x, world_x, scale_x, scale_y):
        """
        –û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –ø–∞–≤—É–∫–∞:
        - –ú–∞—Å—à—Ç–∞–±—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –∑–º—ñ–Ω–∏–≤—Å—è –º–∞—Å—à—Ç–∞–± –µ–∫—Ä–∞–Ω—É
        - –í–∏–∑–Ω–∞—á–∞—î –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é –¥–æ –≥—Ä–∞–≤—Ü—è —Ç–∞ –∞–∫—Ç–∏–≤—É—î –∞–≥—Ä–µ—Å—ñ—é
        - –ö–µ—Ä—É—î –ø–æ–≤–µ–¥—ñ–Ω–∫–æ—é: –±–ª—É–∫–∞–Ω–Ω—è–º, –∞–≥—Ä–µ—Å—ñ—î—é, —Å—Ç—Ä–∏–±–∫–∞–º–∏, –∞—Ç–∞–∫–∞–º–∏, —Å–º–µ—Ä—Ç—é
        - –û–Ω–æ–≤–ª—é—î –∑–≤—É–∫
        """
        # –Ø–∫—â–æ –ø–∞–≤—É–∫ –ø–æ–º–µ—Ä
        if self.dead:
            # –Ø–∫—â–æ –º–µ—Ä—Ç–≤–∏–π —ñ —â–µ –Ω–µ —Ç–æ—Ä–∫–Ω—É–≤—Å—è –∑–µ–º–ª—ñ ‚Äî –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–∞–¥—ñ–Ω–Ω—è
            if self.jumping and self.y < self.ground_y:
                self.handle_jump(self.scale_y, player_x)
            self.animate(dt)
            return

        # üñºÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞—Å—à—Ç–∞–±—É (—è–∫—â–æ –∑–º—ñ–Ω–µ–Ω–æ –º–∞—Å—à—Ç–∞–± –µ–∫—Ä–∞–Ω–∞)
        if self.scale_x != scale_x or self.scale_y != scale_y:
            self.scale_x = scale_x
            self.scale_y = scale_y
            self.reload_scaled_frames()

        # ‚õî –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥—Ä–∞–≤—Ü—è ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        if player_x is None:
            return

        # üìè –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó –¥–æ –≥—Ä–∞–≤—Ü—è (–ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–∞–≤—É–∫–∞)
        spider_center_x = self.x + self.walk_frames[0].get_width() // 2
        distance = abs(spider_center_x - player_x)

        # üò° –ü–µ—Ä–µ—Ö—ñ–¥ —É —Å—Ç–∞–Ω –∞–≥—Ä–µ—Å—ñ—ó
        if not self.aggro and distance <= self.AGGRO_DISTANCE:
            self.aggro = True
            self.aggro_paused = True  # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–æ—é –ø–æ–≤–µ–¥—ñ–Ω–∫–æ—é
            self.aggro_wait_timer = 0
            self.set_walking(False)
            self.walk_direction = 0
            self.aggro_current_speed = self.AGGRO_SPEED_INITIAL

        # üö∂ –†–µ–∂–∏–º –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –±–ª—É–∫–∞–Ω–Ω—è, —è–∫—â–æ –Ω–µ –∞–≥—Ä–µ—Å–∏–≤–Ω–∏–π
        if not self.aggro:
            self.handle_random_walk(dt, player_x)
            return

        # ‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –∞–≥—Ä–µ—Å–∏–≤–Ω–æ—ó –¥—ñ—ó
        if self.aggro_paused:
            self.set_walking(False)
            self.aggro_wait_timer += dt
            if self.aggro_wait_timer >= self.AGGRO_PAUSE_DURATION:
                self.aggro_paused = False
                self.set_walking(True)
            return

        # ü¶ò –Ø–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –¥–∞–ª–µ–∫–æ ‚Äî —ñ–Ω–æ–¥—ñ —Å—Ç—Ä–∏–±–∞—î, —ñ–Ω–æ–¥—ñ –ø—Ä–æ—Å—Ç–æ –π–¥–µ
        if self.aggro and not self.jumping and not self.after_jump_pause:
            if distance >= 600:
                self.far_jump_check_timer += dt
                if self.far_jump_check_timer >= self.far_jump_check_cooldown:
                    self.far_jump_check_timer = 0
                    self.far_jump_check_cooldown = random.randint(*Spider.FAR_JUMP_CHECK_INTERVAL)

                    if random.random() < Spider.FAR_JUMP_PROBABILITY:
                        self.set_walking(False)
                        self.walk_direction = 0
                        self.start_directional_jump(player_x)
                        return

        # üõ´ –°—Ç—Ä–∏–±–æ–∫ —É –ø—Ä–æ—Ü–µ—Å—ñ ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä—É—Ö
        if self.jumping:
            self.handle_jump(world_x, player_x)
            self.animate(dt)
            return

        # üïí –ü–∞—É–∑–∞ –ø—ñ—Å–ª—è —Å—Ç—Ä–∏–±–∫–∞ ‚Äî —á–µ–∫–∞—î–º–æ, –Ω–µ —Ä—É—Ö–∞—î–º–æ—Å—å
        if self.after_jump_pause:
            self.after_jump_timer += dt
            if self.after_jump_timer >= self.JUMP_PAUSE_DURATION:
                self.after_jump_pause = False
            return

        # ‚öîÔ∏è –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ —É —Ä–µ–∂–∏–º—ñ –∞–≥—Ä–µ—Å—ñ—ó: –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è, –∞—Ç–∞–∫–∞ —Ç–æ—â–æ
        self.handle_aggro_attack(dt, player_x, world_x)

        # üîÅ –Ø–∫—â–æ –ø—ñ–¥ —á–∞—Å –∞—Ç–∞–∫–∏ –ø–æ—á–∞–≤—Å—è —Å—Ç—Ä–∏–±–æ–∫ ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
        if self.jumping:
            self.handle_jump(world_x, player_x)
            self.animate(dt)
            return

        # üîâ –ó–º–µ–Ω—à–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ –∫—Ä–æ–∫—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
        self.update_sound_volume_by_distance(self.walk_sound, distance)

    def handle_random_walk(self, dt, player_x):
        """
        –í–∏–ø–∞–¥–∫–æ–≤–µ –±–ª—É–∫–∞–Ω–Ω—è –ø–∞–≤—É–∫–∞:
        - –ß–∞—Å –≤—ñ–¥ —á–∞—Å—É –ø–∞–≤—É–∫ –≤–∏—Ä—ñ—à—É—î –ø–æ—á–∞—Ç–∏ —Ä—É—Ö —É –≤–∏–ø–∞–¥–∫–æ–≤–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
        - –†—É—Ö —Ç—Ä–∏–≤–∞—î –∑–∞–¥–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Å—É
        - –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –ø–∞–≤—É–∫ –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è –π —á–µ–∫–∞—î –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è
        """
        self.walk_timer += dt  # ‚è±Ô∏è –ß–∞—Å, —â–æ –º–∏–Ω—É–≤ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è
        distance = abs(self.x - player_x)
        self.update_sound_volume_by_distance(self.walk_sound, distance)

        if self.dead:
            return

        if self.walking:
            # üö∂ –ê–∫—Ç–∏–≤–Ω–∏–π —Ä—É—Ö: –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
            self.walk_elapsed += dt
            self.x += self.walk_direction * self.walk_speed

            # üõë –ß–∞—Å —Ä—É—Ö—É –≤–∏—á–µ—Ä–ø–∞–Ω–æ ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
            if self.walk_elapsed >= self.walk_duration:
                self.set_walking(False)
                self.walk_timer = 0
                self.walk_direction = 0
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, –∫–æ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –±—É–¥–µ –ø—Ä–∏–π–Ω—è—Ç–æ —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ —Ä—É—Ö
                self.next_walk_decision = random.randint(*self.WALK_DECISION_INTERVAL)

        else:
            # üß† –ß–∞—Å —É—Ö–≤–∞–ª—é–≤–∞—Ç–∏ –Ω–æ–≤–µ —Ä—ñ—à–µ–Ω–Ω—è?
            if self.walk_timer >= self.next_walk_decision:
                if random.random() < self.WALK_PROBABILITY:
                    # ‚úÖ –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤—É –ø—Ä–æ–≥—É–ª—è–Ω–∫—É
                    self.set_walking(True)
                    self.walk_elapsed = 0
                    self.walk_duration = random.randint(*self.WALK_DURATION_RANGE)
                    self.walk_direction = random.choice([-1, 1])

                    # üîÑ –§–ª—ñ–ø–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —Ä—É—Ö–∞—î–º–æ—Å—è –≤–ø—Ä–∞–≤–æ
                    self.flipped = self.walk_direction == 1
                    self.walk_frames = [
                        pygame.transform.flip(f, True, False) for f in self.walk_frames_original
                    ] if self.flipped else self.walk_frames_original

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, –≤–∏—Ä—ñ—à–∏–ª–∏ –π—Ç–∏ —á–∏ –Ω—ñ
                self.walk_timer = 0
                self.next_walk_decision = random.randint(*self.WALK_DECISION_INTERVAL)

        # üéûÔ∏è –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞–¥—Ä –∞–Ω—ñ–º–∞—Ü—ñ—ó
        self.animate(dt)

    def handle_aggro_attack(self, dt, player_x, world_x):
        """
        –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –ø–∞–≤—É–∫–∞ –≤ –∞–≥—Ä–µ—Å–∏–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ:
        - –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–µ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –≥—Ä–∞–≤—Ü—è
        - –í–∏–ø–∞–¥–∫–æ–≤—ñ –∑—É–ø–∏–Ω–∫–∏ –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω—ñ—à–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
        - –Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è —Å—Ç—Ä–∏–±–∫–æ–≤–æ—ó –∞—Ç–∞–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ–º—É –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—ñ
        """

        if self.dead:
            return

        # ‚õî –Ø–∫—â–æ –ø–∞–≤—É–∫ –∑–∞—Ä–∞–∑ —Å—Ç—Ä–∏–±–∞—î –∞–±–æ —É –ø—ñ—Å–ª—è—Å—Ç—Ä–∏–±–∫–æ–≤—ñ–π –ø–∞—É–∑—ñ ‚Äî –Ω–µ –∞—Ç–∞–∫—É—î
        if self.jumping or self.after_jump_pause:
            return

        # üêû –Ü–º—ñ—Ç–∞—Ü—ñ—è –ø–∞—É–∑ —É –ø–µ—Ä–µ—Å—É–≤–∞–Ω–Ω—ñ (—ñ–Ω–æ–¥—ñ –ø–∞–≤—É–∫ "—Å—Ç–æ–ø–∏—Ç—å—Å—è")
        if self.aggro_stopping:
            self.set_walking(False)
            self.aggro_stop_timer += dt
            if self.aggro_stop_timer >= self.aggro_stop_duration:
                # –ó—É–ø–∏–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–µ—Ä–µ—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è
                self.aggro_stopping = False
                self.aggro_stop_timer = 0
            return

        # üìè –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ –Ω–∞–ø—Ä—è–º–∫—É –¥–æ –≥—Ä–∞–≤—Ü—è
        spider_center_x = self.x + self.walk_frames[0].get_width() // 2

        # –°—Ç–æ–ø-–¥–∏—Å—Ç–∞–Ω—Ü—ñ—è ‚Äî –ø–∞–≤—É–∫ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –≤–ø—Ä–∏—Ç—É–ª, –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è –Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
        spider_center_x = self.x + self.walk_frames[0].get_width() // 2
        target_x = player_x - self.STOP_DISTANCE*self.scale if spider_center_x < player_x else player_x + self.STOP_DISTANCE*self.scale
        self.flipped = spider_center_x < player_x
        direction = 1 if target_x > spider_center_x else -1

        # üöÄ –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è (–∞–∂ –ø–æ–∫–∏ –Ω–µ –¥–æ—Å—è–≥–Ω–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ)
        if self.aggro_current_speed < self.aggro_speed_max_scaled:
            self.aggro_current_speed += self.AGGRO_ACCELERATION / self.scale
            self.aggro_current_speed = min(self.aggro_current_speed, self.aggro_speed_max_scaled)

        # ‚û°Ô∏è –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ—Å—É–≤–∞—î–º–æ—Å—å —ñ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º dt
        self.x += direction * self.aggro_current_speed

        # ‚û°Ô∏è –ü–µ—Ä–µ—Å—É–≤–∞–Ω–Ω—è –≤ –Ω–∞–ø—Ä—è–º–∫—É –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        if self.aggro_current_speed < self.AGGRO_SPEED_MAX:
            self.x += direction * self.aggro_current_speed
        else:
            self.x += direction * self.aggro_current_speed

        # üêú –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑—É–ø–∏–Ω–∫–∞ ‚Äî —Å–∏–º—É–ª—è—Ü—ñ—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
        if random.random() < self.AGGRO_STOP_PROBABILITY:
            self.aggro_stopping = True
            self.aggro_stop_duration = random.randint(
                self.AGGRO_STOP_MIN_DURATION,
                self.AGGRO_STOP_MAX_DURATION
            )
            self.aggro_stop_timer = 0
            return

        # üêæ –ê–Ω—ñ–º–∞—Ü—ñ—è —Ö–æ–¥—å–±–∏ + –ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—Ñ–ª—ñ–ø –∞–±–æ –Ω—ñ)
        self.set_walking(True)
        self.walk_direction = direction
        if self.flipped:
            self.flip_images()
        else:
            self.walk_frames = self.walk_frames_original
            self.stay_frames = self.load_frames("stay")  # –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—Ä–µ–π–º—ñ–≤ —É –Ω–µ—Ñ–ª—ñ–ø–Ω—É—Ç–æ–º—É –≤–∏–≥–ª—è–¥—ñ

        # ü¶ò –ü–æ—á–∞—Ç–æ–∫ –∞—Ç–∞–∫–∏, —è–∫—â–æ –ø—ñ–¥—ñ–π—à–æ–≤ –¥–æ—Å–∏—Ç—å –±–ª–∏–∑—å–∫–æ
        if abs(spider_center_x - target_x) <= 15:
            self.set_walking(False)
            self.walk_direction = 0
            self.start_jump_attack(player_x)

        # üéûÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–¥—Ä—É –∞–Ω—ñ–º–∞—Ü—ñ—ó
        self.animate(dt)

    def start_jump_attack(self, player_x):
        """
        –Ü–Ω—ñ—Ü—ñ—é—î —Å—Ç—Ä–∏–±–∫–æ–≤—É –∞—Ç–∞–∫—É –ø–∞–≤—É–∫–∞ –≤ –Ω–∞–ø—Ä—è–º–∫—É –≥—Ä–∞–≤—Ü—è.
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—Ç—Ä–∏–±–∫–∞, –æ–±—á–∏—Å–ª—é—î –Ω–∞–ø—Ä—è–º —ñ —à–≤–∏–¥–∫—ñ—Å—Ç—å, –≥–æ—Ç—É—î –∞–Ω—ñ–º–∞—Ü—ñ—é —Ç–∞ –∑–≤—É–∫.
        """

        if self.dead:
            self.ground_y = self.y
            return

        # üéØ –ê–∫—Ç–∏–≤—É—î–º–æ —Å—Ç–∞–Ω —Å—Ç—Ä–∏–±–∫–∞
        self.jumping = True
        self.jumping_non_attack = False  # –¶–µ ‚Äî –∞—Ç–∞–∫—É–≤–∞–ª—å–Ω–∏–π —Å—Ç—Ä–∏–±–æ–∫
        self.current_frame = 0

        # üìç –ü–æ–∑–∏—Ü—ñ—è –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
        self.jump_start_y = self.y
        self.jump_target_x = player_x

        # üìè –û–±—á–∏—Å–ª—é—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –≥—Ä–∞–≤—Ü—è –ø–æ X —Ç–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É –≤–∏—Å–æ—Ç—É —Å—Ç—Ä–∏–±–∫–∞ –ø–æ Y
        dx = player_x - (self.x + self.walk_frames[0].get_width() // 2)
        dy = -150  # –≤–µ—Ä—à–∏–Ω–∞ –¥—É–≥–∏ (–≤—ñ–¥'—î–º–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –≤–≥–æ—Ä—É)

        # üîí –û–±–º–µ–∂—É—î–º–æ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é —Å—Ç—Ä–∏–±–∫–∞, —â–æ–± –Ω–µ –ø–µ—Ä–µ–ª—ñ—Ç–∞—Ç–∏ –∑–∞ –º–µ–∂—ñ
        total_distance = max(-600, min(dx, 600))
        min_distance = 100 * self.scale
        if 0 < total_distance < min_distance:
            total_distance = min_distance
        elif -min_distance < total_distance < 0:
            total_distance = -min_distance

        # ‚öôÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä—É—Ö—É
        self.jump_total_dx = total_distance
        self.jump_travelled_dx = 0
        self.jump_vx = total_distance / 27  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ ~30 –∫–∞–¥—Ä—ñ–≤)
        self.jump_vy = 2 * dy / 40  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –¥—É–≥–∏

        # üîÑ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É —Ç–∞ —Ñ–ª—ñ–ø –∫–∞–¥—Ä—ñ–≤ —Å—Ç—Ä–∏–±–∫–∞
        self.flipped = dx > 0
        self.jump_frames = (
            [pygame.transform.flip(f, True, False) for f in self.jump_frames_original]
            if self.flipped else self.jump_frames_original.copy()
        )

        # üîâ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—ñ–≤ –∞—Ç–∞–∫–∏ –∑—ñ –∑–Ω–∏–∂–µ–Ω–Ω—è–º –≥—É—á–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó
        distance = abs(self.x - player_x)
        self.update_sound_volume_by_distance(self.jump_sound, distance)
        if self.attack_sounds:
            attack_sound = random.choice(self.attack_sounds)
            self.update_sound_volume_by_distance(attack_sound, distance)
            attack_sound.play()
            if self.manager:
                self.manager.active_sounds.append(attack_sound)

    def start_directional_jump(self, player_x):
        """
        –Ü–Ω—ñ—Ü—ñ—é—î –Ω–µ–∞—Ç–∞–∫—É–≤–∞–ª—å–Ω–∏–π (–ø–µ—Ä–µ–º—ñ—â—É–≤–∞–ª—å–Ω–∏–π) —Å—Ç—Ä–∏–±–æ–∫ –ø–∞–≤—É–∫–∞ —É –Ω–∞–ø—Ä—è–º–∫—É –¥–æ –≥—Ä–∞–≤—Ü—è.
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∫–æ–ª–∏ –≥—Ä–∞–≤–µ—Ü—å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –≤–µ–ª–∏–∫—ñ–π –≤—ñ–¥—Å—Ç–∞–Ω—ñ.
        """

        if self.dead:
            return

        # üöÄ –í–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º —Å—Ç—Ä–∏–±–∫–∞
        self.jumping = True
        self.jumping_non_attack = True  # –¶–µ –Ω–µ –∞—Ç–∞–∫–∞, –ª–∏—à–µ —Å—Ç—Ä–∏–±–æ–∫ —É –Ω–∞–ø—Ä—è–º–∫—É
        self.current_frame = 0

        # üéØ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Å—Ç–∞—Ä—Ç—É —ñ —Ü—ñ–ª—ñ
        self.jump_start_y = self.y
        self.jump_target_x = player_x

        # üìè –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–º—ñ—â–µ–Ω–Ω—è
        dx = player_x - (self.x + self.walk_frames[0].get_width() // 2)

        # üéØ –í–∏–ø–∞–¥–∫–æ–≤–∞ –≤–∏—Å–æ—Ç–∞ –¥—É–≥–∏ —Å—Ç—Ä–∏–±–∫–∞ (—â–æ–± –≤–∏–≥–ª—è–¥–∞–ª–æ –ø—Ä–∏—Ä–æ–¥–Ω—ñ—à–µ)
        dy = random.randint(-130, -110)

        # üîí –û–±–º–µ–∂–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ —Å—Ç—Ä–∏–±–∫–∞ (–≤–ª—ñ–≤–æ –∞–±–æ –≤–ø—Ä–∞–≤–æ)
        total_distance = max(-600, min(dx, 600))

        # ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–ª—å–æ—Ç—É
        self.jump_total_dx = total_distance
        self.jump_travelled_dx = 0
        self.jump_vx = total_distance / 40  # —Ç—Ä–æ—Ö–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏–π, –Ω—ñ–∂ —É –±–æ–π–æ–≤–æ–º—É —Å—Ç—Ä–∏–±–∫—É
        self.jump_vy = 2 * dy / 40  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ —Å–∫–ª–∞–¥–æ–≤–∞ ‚Äî –¥—É–≥–∞

        # üîÑ –û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è –ø–∞–≤—É–∫–∞
        self.flipped = dx > 0
        self.jump_frames = (
            [pygame.transform.flip(f, True, False) for f in self.jump_frames_original]
            if self.flipped else self.jump_frames_original
        )

        # üéûÔ∏è –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∞–Ω—ñ–º–∞—Ü—ñ—ó
        self.jump_animation_done = False

        # üîâ –ó–≤—É–∫ —Å—Ç—Ä–∏–±–∫–∞
        distance = abs(self.x - player_x)
        self.update_sound_volume_by_distance(self.jump_sound, distance)
        self.jump_sound.play()
        if self.manager:
            self.manager.active_sounds.append(self.jump_sound)

    def handle_jump(self, scale_y, player_x):
        """
        –û–Ω–æ–≤–ª—é—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–∞–≤—É–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç—Ä–∏–±–∫–∞.
        –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –≥—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—é, –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∞—Ç–∞–∫—É –ø—ñ–¥ —á–∞—Å —Å—Ç—Ä–∏–±–∫–∞ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–ª—å–æ—Ç—É.
        """

        if self.dead and not self.jumping:
            return

        # üîÅ –Ø–∫—â–æ –º–µ—Ä—Ç–≤–∏–π, –∞–ª–µ —â–µ –Ω–µ –ø—Ä–∏–∑–µ–º–ª–∏–≤—Å—è ‚Äî –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–∞–¥–∞—Ç–∏
        if self.dead and self.y >= self.ground_y:
            self.jumping = False
            self.y = self.ground_y
            return

        self.scale_y = scale_y

        # ‚õÖ –†—É—Ö –ø–æ X —ñ Y
        self.x += self.jump_vx
        self.y += self.jump_vy
        self.jump_travelled_dx += abs(self.jump_vx)

        # ‚¨áÔ∏è –ì—Ä–∞–≤—ñ—Ç–∞—Ü—ñ—è (—ñ–º—ñ—Ç–∞—Ü—ñ—è –¥—É–≥–∏ –ø–æ–ª—å–æ—Ç—É)
        FRAME_TIME = 1 / 60  # 60 FPS
        self.jump_vy += self.jump_gravity * FRAME_TIME ** 2

        # üó°Ô∏è –ê—Ç–∞–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç—Ä–∏–±–∫–∞ (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞)
        if not self.has_attacked_this_jump and not self.jumping_non_attack:
            spider_center_x = self.x + self.get_current_frames()[self.current_frame].get_width() // 2
            distance_to_player = abs(spider_center_x - player_x)

            if distance_to_player < 30 * self.scale_x * self.scale:
                self.has_attacked_this_jump = True
                self.attack_count += 1

                if self.manager:
                    self.manager.damage_player(int(10 * self.scale))  # –£—Ä–æ–Ω –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É

            if self.attack_count >= 5:
                self.die()

        # üõ¨ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ç—Ä–∏–±–∫–∞ (–ø–∞–≤—É–∫ —Ç–æ—Ä–∫–Ω—É–≤—Å—è –∑–µ–º–ª—ñ)
        if self.y >= self.ground_y:
            self.y = self.ground_y
            self.jumping = False
            self.jumping_non_attack = False
            self.has_attacked_this_jump = False
            self.current_frame = 0

            # ‚è∏Ô∏è –ü—ñ—Å–ª—è—Å—Ç—Ä–∏–±–∫–æ–≤–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            self.after_jump_pause = True
            self.after_jump_timer = 0
            self.aggro_paused = False

    def die(self):
        """
        –ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å —Å–º–µ—Ä—Ç—ñ –ø–∞–≤—É–∫–∞:
        - –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω `dead`
        - –ó—É–ø–∏–Ω—è—î —Ö–æ–¥—å–±—É, –∞–≥—Ä–µ—Å—ñ—é, —Å—Ç—Ä–∏–±–∫–∏
        - –°–∫–∏–¥–∞—î –∫–∞–¥—Ä–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó
        """
        if self.dead:
            return  # –£–∂–µ –º–µ—Ä—Ç–≤–∏–π

        logger.info("[Spider] –ü–∞–≤—É–∫ –∑–∞–≥–∏–Ω—É–≤.")
        self.dead = True
        self.dead_animation_done = False
        self.set_walking(False)
        self.aggro = False
        self.aggro_paused = False
        self.jumping_non_attack = False
        self.after_jump_pause = False
        self.current_frame = 0
        self.frame_timer = 0
        # üîâ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É —Å–º–µ—Ä—Ç—ñ
        if self.death_sound:
            self.update_sound_volume_by_distance(self.death_sound, 0)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≥—É—á–Ω—ñ—Å—Ç—å
            self.death_sound.play()
            if self.manager:
                self.manager.active_sounds.append(self.death_sound)

    def animate(self, dt):
        """
        –û–Ω–æ–≤–ª—é—î –∫–∞–¥—Ä –∞–Ω—ñ–º–∞—Ü—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É.
        """
        self.frame_timer += dt
        frames = self.get_current_frames()

        if self.dead:
            if self.current_frame < len(frames) - 1:
                # üéûÔ∏è –û—Å–Ω–æ–≤–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è —Å–º–µ—Ä—Ç—ñ
                if self.frame_timer >= self.frame_delay:
                    self.frame_timer = 0
                    self.current_frame += 1
            else:
                # ‚úÖ –û—Å–Ω–æ–≤–Ω–∞ —Å–º–µ—Ä—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ "—Ö–∞–æ—Ç–∏—á–Ω–µ –∑–¥—Ä–∏–≥–∞–Ω–Ω—è"
                self.dead_animation_done = True

                if not hasattr(self, "_death_twitch_timer"):
                    self._death_twitch_timer = 0
                    self._death_twitch_delay = 200
                    self._death_twitch_time = 0

                self._death_twitch_time += dt

                if self._death_twitch_time >= 5000:
                    self.current_frame = len(frames) - 1
                    # ‚¨áÔ∏è –ü–æ—á–∏–Ω–∞—î–º–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
                    if not self.fade_out_started:
                        self.fade_out_started = True
                        self.fade_timer = 0

                else:
                    self._death_twitch_timer += dt
                    base_delay = 200
                    growth = 0.0017
                    decay_factor = 1 + growth * self._death_twitch_time
                    adjusted_delay = int(base_delay * decay_factor)

                    if self._death_twitch_timer >= self._death_twitch_delay:
                        self._death_twitch_timer = 0
                        self._death_twitch_delay = random.randint(adjusted_delay, adjusted_delay + 500)
                        self.current_frame = random.choice([
                            len(frames) - 1,
                            len(frames) - 2,
                            len(frames) - 3
                        ])

        # ‚¨áÔ∏è fade-out –ø—Ä–∞—Ü—é—î –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ "twitch"
        if self.dead_animation_done:
            spider_center_x = self.x + self.get_current_frames()[self.current_frame].get_width() // 2
            distance = abs(spider_center_x - self.manager.player_x if self.manager else 0)

            if distance > 500:
                if not self.fade_out_started:
                    self.fade_out_started = True
                    self.fade_timer = 0
                else:
                    self.fade_timer += dt
                    progress = self.fade_timer / self.fade_duration
                    self.fade_alpha = max(0, int(255 * (1 - progress)))

        # üîÅ –Ü–Ω—à—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó
        elif not self.dead:
            if self.frame_timer >= self.frame_delay:
                self.frame_timer = 0

                if self.jumping:
                    if self.current_frame < len(frames) - 1:
                        self.current_frame += 1
                    else:
                        self.jump_animation_done = True
                else:
                    self.current_frame = (self.current_frame + 1) % len(frames)

    def draw(self, screen, world_x):
        frames = self.get_current_frames()
        if not frames:
            logger.warning("[Spider] –ù–µ–º–∞—î –∫–∞–¥—Ä—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É ‚Äî –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–º–∞–ª—å–æ–≤–∫–∏.")
            return

        if self.current_frame >= len(frames):
            logger.warning(f"[Spider] –ü–æ—Ç–æ—á–Ω–∏–π –∫–∞–¥—Ä {self.current_frame} > {len(frames) - 1} ‚Äî –æ–±–Ω—É–ª—è—î–º–æ.")
            self.current_frame = 0

        current_image = frames[self.current_frame]
        screen_x = int(self.x - world_x)
        screen_y = int(self.y - current_image.get_height())

        image_with_alpha = current_image.copy()
        image_with_alpha.set_alpha(self.fade_alpha)

        screen.blit(image_with_alpha, (screen_x, screen_y))

        if self.fade_alpha > 0:
            attack_text = self.font.render(f"Atk: {self.attack_count}", True, (255, 255, 255))
            screen.blit(attack_text, (screen_x, screen_y - 20))

    def set_walking(self, walking: bool):
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω —Ö–æ–¥—å–±–∏ –ø–∞–≤—É–∫–∞:
        - —Å–∫–∏–¥–∞—î –∞–Ω—ñ–º–∞—Ü—ñ—é, —è–∫—â–æ —Å—Ç–∞–Ω –∑–º—ñ–Ω–µ–Ω–æ
        - –≤–º–∏–∫–∞—î –∞–±–æ –≤–∏–º–∏–∫–∞—î –∑–≤—É–∫ –∫—Ä–æ–∫—ñ–≤
        """
        # üîÑ –Ø–∫—â–æ —Å—Ç–∞–Ω –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî —Å–∫–∏–¥–∞—î–º–æ –∫–∞–¥—Ä –∞–Ω—ñ–º–∞—Ü—ñ—ó
        if self.walking != walking:
            self.current_frame = 0
        self.walking = walking

        # üéµ –ö–µ—Ä—É—î–º–æ –∑–≤—É–∫–æ–º –∫—Ä–æ–∫—ñ–≤
        channel = getattr(self, "walk_channel", None)

        if walking:
            # üîä –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–≤—É–∫, —è–∫—â–æ —â–µ –Ω–µ –≥—Ä–∞—î
            if channel is None or not channel.get_busy():
                self.walk_channel = self.walk_sound.play(loops=-1)
                if self.manager:
                    self.manager.active_sounds.append(self.walk_channel)
        else:
            # üîá –ó—É–ø–∏–Ω—è—î–º–æ, —è–∫—â–æ –π–¥–µ –∑–≤—É–∫
            if channel and channel.get_busy():
                channel.stop()
                self.walk_channel = None

    def update_sound_volume_by_distance(self, sound, distance):
        """
        –ó–º—ñ–Ω—é—î –≥—É—á–Ω—ñ—Å—Ç—å –∑–≤—É–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ –≥—Ä–∞–≤—Ü—è.
        –ß–∏–º –¥–∞–ª—ñ –ø–∞–≤—É–∫ ‚Äî —Ç–∏–º —Ç–∏—Ö—ñ—à–µ –∑–≤—É–∫.

        :param sound: pygame.mixer.Sound ‚Äî –æ–±'—î–∫—Ç –∑–≤—É–∫—É
        :param distance: float ‚Äî –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –≥—Ä–∞–≤—Ü—è
        """
        if not sound:
            return

        # üìè –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ
        MAX_DISTANCE = 1500  # –ü—ñ—Å–ª—è —Ü—ñ—î—ó –º–µ–∂—ñ ‚Äî –∑–≤—É–∫ –Ω–µ —á—É—Ç–Ω–æ
        MIN_VOLUME = 0.1  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≥—É—á–Ω—ñ—Å—Ç—å –ø—Ä–∏ –≤—ñ–¥–¥–∞–ª–µ–Ω–Ω—ñ
        MAX_VOLUME = 1.0  # –ë–∞–∑–æ–≤–∞ –≥—É—á–Ω—ñ—Å—Ç—å –ø–æ—Ä—É—á

        if distance >= MAX_DISTANCE:
            volume = 0  # üîá –ó–æ–≤—Å—ñ–º –Ω–µ —á—É—Ç–Ω–æ
        else:
            ratio = distance / MAX_DISTANCE
            # üìâ –ü–ª–∞–≤–Ω–µ –∑–∞—Ç—É—Ö–∞–Ω–Ω—è (–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞ –∫—Ä–∏–≤–∞)
            volume = max(MIN_VOLUME, MAX_VOLUME * (1 - ratio) ** 2)
            volume = volume * self.audio_manager.sound_volume

        sound.set_volume(volume)

    def get_current_frames(self):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–±—ñ—Ä –∫–∞–¥—Ä—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–∞–≤—É–∫–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –π–æ–≥–æ —Å—Ç–∞–Ω—É.
        """
        if self.dead:
            return self.dead_frames
        if self.jumping:
            return self.jump_frames if self.jumping_non_attack else self.attack_frames
        return self.walk_frames if self.walking else self.stay_frames

    def should_be_removed(self, player_x):
        if not self.dead:
            return False

        spider_center_x = self.x + self.get_current_frames()[self.current_frame].get_width() // 2
        distance = abs(spider_center_x - player_x)

        if self.fade_alpha <= 0 and distance > 600:
            return True
        else:
            return False


class SpiderManager:
    """
    –ö–µ—Ä—É—î –≤—Å—ñ–º–∞ –æ–±'—î–∫—Ç–∞–º–∏ –ø–∞–≤—É–∫—ñ–≤ –Ω–∞ —Ä—ñ–≤–Ω—ñ:
    - —Å–ø–∞–≤–Ω
    - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    - –ø—Ä–æ–º–∞–ª—å–æ–≤–∫–∞
    - —Å–∫–∏–¥–∞–Ω–Ω—è
    """
    def __init__(self, screen_height, scale_y, audio_manager, scale_x):
        self.spiders = []
        self.active_sounds = []
        self.screen_height = screen_height
        self.scale_y = scale_y
        self.scale_x = scale_x
        self.audio_manager = audio_manager

    def spawn_initial_spiders(self):
        x_positions = [
            (12000, 0.6),
            (12050, 0.65),
            (12950, 0.55),
            (12100, 0.4),
            (12100, 0.4),
            (12100, 0.4),
            (12100, 0.4),
            (12100, 0.4),
            (12100, 0.4),
            (12500, 1.3),
        ]

        self.spiders = []

        for x, scale in x_positions:
            y_relative = 770*self.scale_y + (scale * 50*self.scale_y)
            y_base = int(y_relative * self.scale_y)

            spider = Spider(
                x=x,
                y=y_base,
                audio_manager=self.audio_manager,
                scale_x=self.scale_x,
                scale_y=self.scale_y,
                scale=scale
            )
            spider.manager = self
            self.spiders.append(spider)

    def update(self, dt, hero_world_x, player_width, scale_y, scale_x, player):
        """
        –û–Ω–æ–≤–ª—é—î –≤—Å—ñ—Ö –ø–∞–≤—É–∫—ñ–≤ –Ω–∞ —Ä—ñ–≤–Ω—ñ —Ç–∞ –≤–∏–¥–∞–ª—è—î —Ç–∏—Ö, —Ö—Ç–æ –º–µ—Ä—Ç–≤–∏–π —ñ –¥–∞–ª–µ–∫–æ.
        """
        player_center_x = hero_world_x + player_width // 2
        new_spiders = []
        self.player_x = player_center_x

        for spider in self.spiders:
            spider.update(
                dt=dt,
                player_x=player_center_x,
                world_x=hero_world_x,
                scale_y=scale_y,
                scale_x=scale_x
            )

            # –Ø–∫—â–æ –ø–∞–≤—É–∫–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª—è—Ç–∏ ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ –≤ —Å–ø–∏—Å–∫—É
            if not spider.should_be_removed(player_center_x):
                new_spiders.append(spider)
            else:
                pass

        self.player = player

        self.spiders = new_spiders

    def damage_player(self, amount):
        if hasattr(self, "player") and self.player:
            self.player.hp -= amount
            if self.player.hp < 0:
                self.player.hp = 0
            logging.info(f"[SpiderManager] –ì—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞–≤ {amount} —É—Ä–æ–Ω—É. HP: {self.player.hp}")

    def draw(self, screen, world_x):
        """
        –ú–∞–ª—é—î –≤—Å—ñ—Ö –ø–∞–≤—É–∫—ñ–≤ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –ø–æ Y (–¥–ª—è –≥–ª–∏–±–∏–Ω–∏).
        """
        for spider in sorted(self.spiders, key=lambda s: s.y):
            spider.draw(screen, world_x)

    def reset(self):
        """
        –ü–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â–∞—î –≤—Å—ñ—Ö –ø–∞–≤—É–∫—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É —Ä—ñ–≤–Ω—è).
        """
        self.spiders.clear()

    def stop_all_sounds(self):
        for sound_or_channel in self.active_sounds:
            try:
                sound_or_channel.stop()
            except Exception as e:
                pass
        self.active_sounds.clear()

